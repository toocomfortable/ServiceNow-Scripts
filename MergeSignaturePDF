var ctSysID = current.getUniqueValue();
var sigImageTable = new GlideRecord('signature_image');
sigImageTable.addQuery('document', ctSysID);
sigImageTable.query();

if (sigImageTable.next()) {
  var attachmentSysID = sigImageTable.sys_id;
  gs.print("The sys_id of the attachment is: " + attachmentSysID);
} else {
  gs.print("No attachment was found with the specified catalog task sys_id.");
}

// Create a GlideRecord object for the Attachment table
var attachmentGr = new GlideRecord("sys_attachment");

// Add a query condition to retrieve only attachments related to the catalog task record
attachmentGr.addQuery("table_sys_id", attachmentSysID);

// Run the query
attachmentGr.query();

// Check if there are any attachments found
if (attachmentGr.hasNext()) {
  // Loop through the attachments and retrieve the sys_id
  while (attachmentGr.next()) {
    var attachment = attachmentGr.sys_id;
    gs.info("Attachment sys_id: " + attachment);
  }
} else {
  // No attachments found for the catalog task
  gs.info("No attachments found for catalog task sys_id: " + ctSysID);
}

var params = {
    fillablePdfSysId: '6a5b35f31bfca910fd0e97d58d4bcbbc',
    targetTableName: current.getTableName(),
    targetRecordSysId: current.getUniqueValue(),
    targetPdfName: 'NewPDF1' + '.pdf'
};

params.fieldMap = {
    requestor: current.variables.u_requested_for.getDisplayValue(),
    device_model: current.variables.u_device_model.getDisplayValue(),
    accessory: 'Company X',
    phone_number: current.variables.u_phone_number.getDisplayValue(),
    imei: current.variables.u_IMEI_number.getDisplayValue(),
    iccid: current.variables.u_ICCID_number.getDisplayValue(),
    tkid: current.variables.u_requested_for.employee_number.getDisplayValue(),
    task: current.number,
    date: String(new GlideDate().getByFormat('dd-MM-yyyy'))
};


var signature = {
    pageNumber: 1,
    leftMargin: 200,
    topMargin: 500,
    boxWidth: 125,
    boxHeight: 125,
    attachmentImageSysId: attachment
};

var pdfSignRequestor = new sn_pdfgeneratorutils.PdfMergeSignRequestor();
pdfSignRequestor.addSignatureMapping(signature.pageNumber, signature.leftMargin, signature.topMargin, signature.boxWidth, signature.boxHeight, signature.attachmentImageSysId);

var additionalParams = {
    FlattenType: 'fully_flatten' // donot_flatten // partially_flatten // fully_flatten
};

var v = new sn_pdfgeneratorutils.PDFGenerationAPI();

var result = v.fillFieldsAndMergeSignature(params.fieldMap, params.fillablePdfSysId, params.targetTableName, params.targetRecordSysId, pdfSignRequestor, params.targetPdfName, additionalParams);
gs.info(JSON.stringify(result, null, '\t'));

action.setRedirectURL(current);
